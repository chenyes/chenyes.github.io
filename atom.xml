<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chenyes</title>
  
  <subtitle>记录和分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenyes.github.io/"/>
  <updated>2019-02-28T15:15:47.961Z</updated>
  <id>http://chenyes.github.io/</id>
  
  <author>
    <name>Chenyes</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="http://chenyes.github.io/2019/02/28/test/"/>
    <id>http://chenyes.github.io/2019/02/28/test/</id>
    <published>2019-02-28T15:15:47.000Z</published>
    <updated>2019-02-28T15:15:47.961Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++实现自动生成 get和set方法</title>
    <link href="http://chenyes.github.io/2019/02/28/C-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90-get%E5%92%8Cset%E6%96%B9%E6%B3%95/"/>
    <id>http://chenyes.github.io/2019/02/28/C-实现自动生成-get和set方法/</id>
    <published>2019-02-28T14:50:51.000Z</published>
    <updated>2019-02-28T15:05:56.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-快速生成get，set方法"><a href="#C-快速生成get，set方法" class="headerlink" title="C++快速生成get，set方法"></a>C++快速生成get，set方法</h2><p>C++中生成get和set方法，手写的话，一般先在头文件中先定义属性，然后再根据每个属性定义get和set方法，属性比较多的时候就显得很麻烦，而且代码非常乱。我们可以用宏的方式来定义，代码马上整洁了很多。</p><a id="more"></a><blockquote><p>PropertyBuilder.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PROPERTYBUILDER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROPERTYBUILDER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PropertyBuilder(type, name)\</span></span><br><span class="line">    <span class="keyword">private</span>:\</span><br><span class="line">        type m_#<span class="meta">#name;\</span></span><br><span class="line">    <span class="keyword">public</span>:\</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="built_in">set</span>#<span class="meta">#name(type v) &#123;\</span></span><br><span class="line">        m_#<span class="meta">#name = v;\</span></span><br><span class="line">    &#125;\</span><br><span class="line">    <span class="keyword">inline</span> type get#<span class="meta">#name() &#123;\</span></span><br><span class="line">        <span class="keyword">return</span> m_##name;\</span><br><span class="line">    &#125;\</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PointerPropertyBuilder(type, name)\</span></span><br><span class="line">    <span class="keyword">private</span>:\</span><br><span class="line">        type* m_#<span class="meta">#name;\</span></span><br><span class="line">    <span class="keyword">public</span>:\</span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="built_in">set</span>#<span class="meta">#name(type* v)&#123;\</span></span><br><span class="line">            m_#<span class="meta">#name = v;\</span></span><br><span class="line">        &#125;\</span><br><span class="line">        <span class="keyword">inline</span> type* get#<span class="meta">#name()&#123;\</span></span><br><span class="line">            <span class="keyword">return</span> m_##name;\</span><br><span class="line">        &#125;\</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// PROPERTYBUILDER_H</span></span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用方法：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PropertyBuilder.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    User()&#123;&#125;</span><br><span class="line">    PropertyBuilder(<span class="keyword">int</span>, UserId)</span><br><span class="line">    PropertyBuilder(QString, UserName)</span><br><span class="line">    PropertyBuilder(QString, UserPwd)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-快速生成get，set方法&quot;&gt;&lt;a href=&quot;#C-快速生成get，set方法&quot; class=&quot;headerlink&quot; title=&quot;C++快速生成get，set方法&quot;&gt;&lt;/a&gt;C++快速生成get，set方法&lt;/h2&gt;&lt;p&gt;C++中生成get和set方法，手写的话，一般先在头文件中先定义属性，然后再根据每个属性定义get和set方法，属性比较多的时候就显得很麻烦，而且代码非常乱。我们可以用宏的方式来定义，代码马上整洁了很多。&lt;/p&gt;
    
    </summary>
    
      <category term="技术积累" scheme="http://chenyes.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="C++" scheme="http://chenyes.github.io/tags/C/"/>
    
  </entry>
  
</feed>
