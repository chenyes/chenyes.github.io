<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSM框架学习（一） - spring框架</title>
      <link href="/2019/03/25/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-spring%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/03/25/SSM%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-spring%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM框架-Spring"><a href="#SSM框架-Spring" class="headerlink" title="SSM框架 - Spring"></a>SSM框架 - Spring</h1><p>Spring 是一个轻量级的企业级应用开发框架，于 2004 年由 Rod Johnson 发布了1.0 版本，经过多年的更新迭代，已经逐渐成为 Java 开源世界的第一框架，Spring 框架号称 Java EE 应用的一站式解决方案，与各个优秀的 MVC 框架如 Spring MVC 、Struts2 、JSF 等可以无缝整合，与各个 ORM 框架如 Hibernate 、MyBatis 、JPA 等也可以无缝衔接，其他各种技术也因为 Spring 的存在而被很容易地整合进项目开发之中，如 Redis 整合、Log4J 整合、ElasticSearch 整合、RabbitMQ 整合、Quartz 整合、Thymeleaf 整合等等，只要你开发中需要使用到的技术，Spring 都提供了极好的封装和整合体验，这也是为何 Spring 生命力如此强大的原因，暂时还没有能够替代 Spring 的框架出现。    </p><a id="more"></a><p>Spring 框架提供约 20 个模块，如下图：<br><img src="/images/2019/03/25/9e7b4e70-4f06-11e9-a86a-75f13d697b8c.png" alt="image.png"></p><p>Spring 框架并不强制应用完全依赖于 Spring，开发者可自由选择需要的模块。</p><p>总结起来，Spring 框架有如下优点：</p><ul><li>Spring 的 IOC 容器将对象之间的依赖关系交由 Spring 控制，提高了组件之间的解耦， 简化 Java 开发；</li><li>面向切面编程，Spring AOP 是面向对象编程（OOP）的一种补充，通过这种方式将系统中的一些通用任务提取出来进行单独处理，比如事务处理、日志模块、权限控制、性能监控等，避免大量的代码重复，使得代码更加简洁，复用性更强，也帮助开发人员更加关注业务逻辑；</li><li>非侵入式，代码的污染极低；</li><li>无与伦比的兼容性，与其他优秀的第三方框架无缝整合；</li><li>Spring 框架的源码是无与伦比的 Java 代码盛宴；</li><li>高度的开放性；</li><li>开源社区十分活跃，文档齐全，学习成本不高。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SSM框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 入门小实例</title>
      <link href="/2019/03/03/vue-%E5%85%A5%E9%97%A8%E5%B0%8F%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/03/03/vue-%E5%85%A5%E9%97%A8%E5%B0%8F%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>Vue 是一套用于构建用户界面的渐进式框架，使用vue可以快速地开发应用。具体介绍可以查看<a href="官网">vue官网</a>，起步的教程写得很详细。</p><p>下面记录一个刚学习的一个实例：<br><a id="more"></a></p><blockquote><p>html 代码：主要包含了一个table显示信息，再通过一个form往table里添加数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vm"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-hover table-striped"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>得分<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"student in students"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;student.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;student.classN&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;student.score&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>  <span class="attr">class</span>=<span class="string">"btn btn-success"</span> @<span class="attr">click</span>=<span class="string">"removeStudent(student)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>添加学生<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"student.name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"student.classN"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>得分<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"student.score"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-block"</span> @<span class="attr">click</span>=<span class="string">"addStudent()"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>vue代码，主要申明了一个vue实例，通过el属性指定html里id为vm的element，然后在data里定义了一些数据类型，methods里定义了一些方法，可以在vm的所有子节点下调用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#vm"</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    student:&#123;</span><br><span class="line">      id:<span class="string">''</span>,</span><br><span class="line">      name:<span class="string">''</span>,</span><br><span class="line">      classN:<span class="string">''</span>,</span><br><span class="line">      score:<span class="string">''</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    students:[],</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    addStudent:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.student.id = <span class="keyword">this</span>.students.length + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">this</span>.students.push(<span class="keyword">this</span>.student);</span><br><span class="line">      <span class="keyword">this</span>.student = <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    removeStudent:<span class="function"><span class="keyword">function</span>(<span class="params">stu</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"remove stu"</span>,stu.id);</span><br><span class="line">      <span class="keyword">this</span>.students.splice(stu.id - <span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>引入文件，这里引入了vue.js之外，还引入了bootstrap的css样式表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.bootcss.com/vue/2.6.6/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-resource/0.1.17/vue-resource.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>页面效果</p></blockquote><p><img src="/images/2019/03/03/eec84300-3d5f-11e9-92f5-4bce447054c1.png" alt="index.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QSetting 保存中文配置</title>
      <link href="/2019/03/01/QSetting-%E4%BF%9D%E5%AD%98%E4%B8%AD%E6%96%87%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/03/01/QSetting-%E4%BF%9D%E5%AD%98%E4%B8%AD%E6%96%87%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="QSetting-保存中文配置"><a href="#QSetting-保存中文配置" class="headerlink" title="QSetting 保存中文配置"></a>QSetting 保存中文配置</h3><blockquote><p>使用QSetting时，如果想要保存中文内容，默认是会转成utf-8的格式保存的，这样使用起来并不友好。我们可以通过修改QSetting的默认编码来保存中文。</p></blockquote><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QSettings m_setting = <span class="keyword">new</span> QSettings(configFile, QSettings::IniFormat, <span class="keyword">this</span>);</span><br><span class="line">m_setting-&gt;setIniCodec(QTextCodec::codecForName(<span class="string">"GB2312"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>测试一下</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m_setting-&gt;setValue(<span class="string">"测试Key"</span>,<span class="string">"测试Value"</span>);</span><br><span class="line">m_setting-&gt;sync();</span><br></pre></td></tr></table></figure><blockquote><p>看下配置文件保存的键值对是怎样的</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[General]</span></span><br><span class="line">%U6D4B%U8BD5Key=测试Value</span><br></pre></td></tr></table></figure><p>可见对于key来说，还是会被转换，但是value值成功保存为中文了。<br>使用的时候我们只要保证key为英文，那么配置文件里就不会出现看不懂的编码内容了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> QT </tag>
            
            <tag> QSetting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现自动生成 get和set方法</title>
      <link href="/2019/02/28/C-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90-get%E5%92%8Cset%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/28/C-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90-get%E5%92%8Cset%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="C-快速生成get，set方法"><a href="#C-快速生成get，set方法" class="headerlink" title="C++快速生成get，set方法"></a>C++快速生成get，set方法</h2><p>C++中生成get和set方法，手写的话，一般先在头文件中先定义属性，然后再根据每个属性定义get和set方法，属性比较多的时候就显得很麻烦，而且代码非常乱。我们可以用宏的方式来定义，代码马上整洁了很多。</p><a id="more"></a><blockquote><p>PropertyBuilder.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PROPERTYBUILDER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROPERTYBUILDER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PropertyBuilder(type, name)\</span></span><br><span class="line">    <span class="keyword">private</span>:\</span><br><span class="line">        type m_#<span class="meta">#name;\</span></span><br><span class="line">    <span class="keyword">public</span>:\</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="built_in">set</span>#<span class="meta">#name(type v) &#123;\</span></span><br><span class="line">        m_#<span class="meta">#name = v;\</span></span><br><span class="line">    &#125;\</span><br><span class="line">    <span class="keyword">inline</span> type get#<span class="meta">#name() &#123;\</span></span><br><span class="line">        <span class="keyword">return</span> m_##name;\</span><br><span class="line">    &#125;\</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PointerPropertyBuilder(type, name)\</span></span><br><span class="line">    <span class="keyword">private</span>:\</span><br><span class="line">        type* m_#<span class="meta">#name;\</span></span><br><span class="line">    <span class="keyword">public</span>:\</span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="built_in">set</span>#<span class="meta">#name(type* v)&#123;\</span></span><br><span class="line">            m_#<span class="meta">#name = v;\</span></span><br><span class="line">        &#125;\</span><br><span class="line">        <span class="keyword">inline</span> type* get#<span class="meta">#name()&#123;\</span></span><br><span class="line">            <span class="keyword">return</span> m_##name;\</span><br><span class="line">        &#125;\</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// PROPERTYBUILDER_H</span></span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用方法：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PropertyBuilder.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    User()&#123;&#125;</span><br><span class="line">    PropertyBuilder(<span class="keyword">int</span>, UserId)</span><br><span class="line">    PropertyBuilder(QString, UserName)</span><br><span class="line">    PropertyBuilder(QString, UserPwd)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
