<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>QSetting 保存中文配置</title>
      <link href="/2019/03/01/QSetting-%E4%BF%9D%E5%AD%98%E4%B8%AD%E6%96%87%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/03/01/QSetting-%E4%BF%9D%E5%AD%98%E4%B8%AD%E6%96%87%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="QSetting-保存中文配置"><a href="#QSetting-保存中文配置" class="headerlink" title="QSetting 保存中文配置"></a>QSetting 保存中文配置</h3><blockquote><p>使用QSetting时，如果想要保存中文内容，默认是会转成utf-8的格式保存的，这样使用起来并不友好。我们可以通过修改QSetting的默认编码来保存中文。</p></blockquote><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QSettings m_setting = <span class="keyword">new</span> QSettings(configFile, QSettings::IniFormat, <span class="keyword">this</span>);</span><br><span class="line">m_setting-&gt;setIniCodec(QTextCodec::codecForName(<span class="string">"GB2312"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>测试一下</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m_setting-&gt;setValue(<span class="string">"测试Key"</span>,<span class="string">"测试Value"</span>);</span><br><span class="line">m_setting-&gt;sync();</span><br></pre></td></tr></table></figure><blockquote><p>看下配置文件保存的键值对是怎样的</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[General]</span></span><br><span class="line">%U6D4B%U8BD5Key=测试Value</span><br></pre></td></tr></table></figure><p>可见对于key来说，还是会被转换，但是value值成功保存为中文了。<br>使用的时候我们只要保证key为英文，那么配置文件里就不会出现看不懂的编码内容了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> QT </tag>
            
            <tag> QSetting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现自动生成 get和set方法</title>
      <link href="/2019/02/28/C-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90-get%E5%92%8Cset%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/28/C-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90-get%E5%92%8Cset%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="C-快速生成get，set方法"><a href="#C-快速生成get，set方法" class="headerlink" title="C++快速生成get，set方法"></a>C++快速生成get，set方法</h2><p>C++中生成get和set方法，手写的话，一般先在头文件中先定义属性，然后再根据每个属性定义get和set方法，属性比较多的时候就显得很麻烦，而且代码非常乱。我们可以用宏的方式来定义，代码马上整洁了很多。</p><a id="more"></a><blockquote><p>PropertyBuilder.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PROPERTYBUILDER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROPERTYBUILDER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PropertyBuilder(type, name)\</span></span><br><span class="line">    <span class="keyword">private</span>:\</span><br><span class="line">        type m_#<span class="meta">#name;\</span></span><br><span class="line">    <span class="keyword">public</span>:\</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="built_in">set</span>#<span class="meta">#name(type v) &#123;\</span></span><br><span class="line">        m_#<span class="meta">#name = v;\</span></span><br><span class="line">    &#125;\</span><br><span class="line">    <span class="keyword">inline</span> type get#<span class="meta">#name() &#123;\</span></span><br><span class="line">        <span class="keyword">return</span> m_##name;\</span><br><span class="line">    &#125;\</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PointerPropertyBuilder(type, name)\</span></span><br><span class="line">    <span class="keyword">private</span>:\</span><br><span class="line">        type* m_#<span class="meta">#name;\</span></span><br><span class="line">    <span class="keyword">public</span>:\</span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">void</span> <span class="built_in">set</span>#<span class="meta">#name(type* v)&#123;\</span></span><br><span class="line">            m_#<span class="meta">#name = v;\</span></span><br><span class="line">        &#125;\</span><br><span class="line">        <span class="keyword">inline</span> type* get#<span class="meta">#name()&#123;\</span></span><br><span class="line">            <span class="keyword">return</span> m_##name;\</span><br><span class="line">        &#125;\</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// PROPERTYBUILDER_H</span></span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用方法：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PropertyBuilder.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    User()&#123;&#125;</span><br><span class="line">    PropertyBuilder(<span class="keyword">int</span>, UserId)</span><br><span class="line">    PropertyBuilder(QString, UserName)</span><br><span class="line">    PropertyBuilder(QString, UserPwd)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
