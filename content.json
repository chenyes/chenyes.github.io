{"meta":{"title":"Chenyes","subtitle":"记录和分享","description":"Chenyes的技术博客，","author":"Chenyes","url":"http://chenyes.github.io"},"pages":[],"posts":[{"title":"QSetting 保存中文配置","slug":"QSetting-保存中文配置","date":"2019-03-01T04:24:07.000Z","updated":"2019-03-01T04:24:19.292Z","comments":true,"path":"2019/03/01/QSetting-保存中文配置/","link":"","permalink":"http://chenyes.github.io/2019/03/01/QSetting-保存中文配置/","excerpt":"QSetting 保存中文配置 使用QSetting时，如果想要保存中文内容，默认是会转成utf-8的格式保存的，这样使用起来并不友好。我们可以通过修改QSetting的默认编码来保存中文。","text":"QSetting 保存中文配置 使用QSetting时，如果想要保存中文内容，默认是会转成utf-8的格式保存的，这样使用起来并不友好。我们可以通过修改QSetting的默认编码来保存中文。 12QSettings m_setting = new QSettings(configFile, QSettings::IniFormat, this);m_setting-&gt;setIniCodec(QTextCodec::codecForName(\"GB2312\")); 测试一下 12m_setting-&gt;setValue(\"测试Key\",\"测试Value\");m_setting-&gt;sync(); 看下配置文件保存的键值对是怎样的 12[General]%U6D4B%U8BD5Key=测试Value 可见对于key来说，还是会被转换，但是value值成功保存为中文了。使用的时候我们只要保证key为英文，那么配置文件里就不会出现看不懂的编码内容了。","categories":[{"name":"技术积累","slug":"技术积累","permalink":"http://chenyes.github.io/categories/技术积累/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://chenyes.github.io/tags/C/"},{"name":"QT","slug":"QT","permalink":"http://chenyes.github.io/tags/QT/"},{"name":"QSetting","slug":"QSetting","permalink":"http://chenyes.github.io/tags/QSetting/"}]},{"title":"C++实现自动生成 get和set方法","slug":"C-实现自动生成-get和set方法","date":"2019-02-28T14:50:51.000Z","updated":"2019-02-28T15:05:56.933Z","comments":true,"path":"2019/02/28/C-实现自动生成-get和set方法/","link":"","permalink":"http://chenyes.github.io/2019/02/28/C-实现自动生成-get和set方法/","excerpt":"C++快速生成get，set方法C++中生成get和set方法，手写的话，一般先在头文件中先定义属性，然后再根据每个属性定义get和set方法，属性比较多的时候就显得很麻烦，而且代码非常乱。我们可以用宏的方式来定义，代码马上整洁了很多。","text":"C++快速生成get，set方法C++中生成get和set方法，手写的话，一般先在头文件中先定义属性，然后再根据每个属性定义get和set方法，属性比较多的时候就显得很麻烦，而且代码非常乱。我们可以用宏的方式来定义，代码马上整洁了很多。 PropertyBuilder.h1234567891011121314151617181920212223242526#ifndef PROPERTYBUILDER_H#define PROPERTYBUILDER_H#define PropertyBuilder(type, name)\\ private:\\ type m_##name;\\ public:\\ inline void set##name(type v) &#123;\\ m_##name = v;\\ &#125;\\ inline type get##name() &#123;\\ return m_##name;\\ &#125;\\#define PointerPropertyBuilder(type, name)\\ private:\\ type* m_##name;\\ public:\\ inline void set##name(type* v)&#123;\\ m_##name = v;\\ &#125;\\ inline type* get##name()&#123;\\ return m_##name;\\ &#125;\\#endif // PROPERTYBUILDER_H 使用方法：12345678910#include \"PropertyBuilder.h\"class User&#123;public: User()&#123;&#125; PropertyBuilder(int, UserId) PropertyBuilder(QString, UserName) PropertyBuilder(QString, UserPwd)&#125;;","categories":[{"name":"技术积累","slug":"技术积累","permalink":"http://chenyes.github.io/categories/技术积累/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://chenyes.github.io/tags/C/"}]}]}